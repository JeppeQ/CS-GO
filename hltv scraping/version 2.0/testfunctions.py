from __future__ import division
import numpy as np
import random

def vulcun(stats, side, rt, kills):
    dt = ['pistol', 'eco', 'force', 'full']
    points = [0 for i in range(5)]
    #Kills
    for i in range(len(stats)):
        index = dt.index(rt)*6
        points[i] += (marco( stats[i][side][index:index+6] ) * 2)
    #Headshots
    for i in range(len(stats)):
        index = dt.index(rt)*3 + 2
        hs = stats[i][6+side][index] / stats[i][8][side*4+dt.index(rt)]
        for b in range(int(points[i]/2)):
            if marco( [hs, 1.0] ) == 0:
                points[i] += 0.5
    #Deaths
    if kills < 5:
        index = dt.index(rt)*3 + 1            
        points = [x-y for x,y in zip( points, marcosplit([i[6+side][index] / i[8][side*4+dt.index(rt)] for i in stats], kills) )]
    else:
        points = [i-1 for i in points]
    #Assist
    for i in range(len(stats)):
        index = dt.index(rt)*3
        if marco( [stats[i][6+side][index] / stats[i][8][side*4+dt.index(rt)], 1.0] ) == 0:
            points[i] += 1.6
    return points

def marcosplit(x, antal):
    A = [0,0,0,0,0]
    for i in range(antal):
        marc = marco( x )
        A[marc] = 1
        x[marc] = 0
    return A

def marco(x):
    arr = np.array(x)
    cumsum = np.cumsum(arr)
    chain = np.array([i/cumsum[-1] for i in cumsum])
    return np.where(chain > random.random())[0][0]

stats = ([([1, 4, 1, 0, 0, 0, 8, 1, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 21, 16, 11, 2, 1, 0],
           [5, 1, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 35, 18, 7, 1, 0, 0],
           3, [3, 1, 5, 28], [3, 1, 5, 32], [3, 5, 5, 29], [0, 5, 6, 1, 8, 0, 3, 9, 4, 4, 28, 6], [0, 5, 1, 2, 5, 1, 2, 6, 1, 8, 31, 13], [6, 9, 13, 51, 6, 6, 9, 61], 6), ([5, 2, 2, 0, 0, 0, 9, 3, 1, 0, 0, 0, 12, 5, 0, 1, 0, 0, 55, 17, 11, 0, 0, 0], [6, 2, 1, 0, 0, 0, 6, 2, 0, 0, 0, 0, 9, 2, 2, 0, 0, 0, 53, 18, 2, 1, 0, 0], 5, [4, 2, 6, 49], [4, 1, 6, 38], [3, 5, 6, 34], [0, 6, 6, 1, 12, 3, 2, 15, 4, 19, 48, 18], [0, 4, 4, 2, 6, 0, 0, 7, 5, 9, 29, 12], [9, 13, 18, 83, 9, 8, 13, 74], 9), ([4, 2, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 4, 4, 2, 3, 0, 0, 26, 9, 14, 2, 0, 0], [5, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 4, 2, 3, 0, 0, 0, 31, 21, 4, 4, 1, 0], 3, [3, 1, 5, 28], [3, 1, 5, 32], [3, 5, 5, 29], [2, 6, 2, 0, 7, 1, 0, 8, 4, 8, 26, 10], [0, 5, 0, 3, 6, 0, 0, 4, 5, 8, 39, 22], [6, 9, 13, 51, 6, 6, 9, 61], 6), ([0, 6, 0, 0, 0, 0, 6, 3, 0, 0, 0, 0, 9, 2, 2, 0, 0, 0, 24, 15, 9, 3, 0, 0], [4, 0, 0, 2, 0, 0, 5, 1, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 27, 27, 5, 2, 0, 0], 3, [3, 1, 5, 28], [3, 1, 5, 32], [3, 5, 5, 29], [0, 3, 6, 2, 8, 3, 1, 11, 4, 8, 28, 18], [1, 4, 6, 0, 5, 1, 2, 6, 3, 2, 34, 25], [6, 9, 13, 51, 6, 6, 9, 61], 6), ([2, 2, 2, 0, 0, 0, 7, 0, 0, 2, 0, 0, 7, 2, 4, 0, 0, 0, 31, 17, 3, 0, 0, 0], [0, 6, 0, 0, 0, 0, 1, 5, 0, 0, 0, 0, 5, 3, 1, 0, 0, 0, 27, 24, 7, 2, 1, 0], 3, [3, 1, 5, 28], [3, 1, 5, 32], [3, 5, 5, 29], [0, 3, 4, 0, 7, 4, 2, 8, 4, 13, 28, 9], [0, 4, 4, 0, 6, 1, 0, 6, 2, 8, 36, 24], [6, 9, 13, 51, 6, 6, 9, 61], 6)], [([9, 4, 3, 1, 0, 0, 5, 8, 3, 0, 0, 0, 18, 4, 3, 2, 0, 0, 65, 61, 15, 6, 1, 0], [7, 2, 6, 2, 0, 0, 5, 4, 1, 0, 0, 0, 7, 3, 2, 0, 0, 0, 80, 49, 23, 3, 4, 0], 8, [6, 2, 8, 91], [12, 4, 6, 108], [15, 7, 6, 94], [1, 13, 13, 0, 13, 7, 6, 19, 9, 29, 73, 47], [1, 10, 18, 1, 6, 4, 1, 10, 0, 25, 91, 68], [17, 16, 27, 148, 17, 10, 12, 159], 17), ([1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 9, 2, 0, 0, 0], [2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 8, 7, 2, 1, 0, 0], 1, [1, 1, 1, 13], [0, 1, 0, 6], [2, 1, 1, 10], [0, 1, 1, 0, 1, 0, 1, 1, 0, 4, 10, 6], [0, 2, 0, 0, 1, 0, 1, 5, 2, 0, 9, 4], [2, 2, 1, 21, 2, 3, 6, 18], 2), ([15, 6, 0, 0, 0, 0, 19, 4, 1, 1, 0, 0, 18, 10, 7, 0, 0, 0, 132, 51, 20, 4, 0, 0], [8, 5, 4, 2, 2, 0, 10, 4, 0, 0, 0, 0, 18, 8, 3, 0, 0, 0, 123, 42, 21, 4, 0, 0], 13, [7, 2, 13, 109], [13, 5, 12, 116], [18, 8, 13, 101], [1, 14, 3, 0, 21, 4, 7, 28, 13, 25, 108, 45], [2, 15, 21, 0, 9, 2, 2, 16, 8, 19, 100, 50], [21, 25, 35, 207, 21, 14, 29, 190], 21), ([10, 4, 3, 0, 0, 0, 14, 2, 0, 0, 0, 0, 23, 3, 1, 0, 0, 0, 61, 52, 27, 6, 2, 0], [8, 7, 2, 0, 0, 0, 6, 2, 1, 1, 0, 0, 6, 4, 1, 1, 0, 0, 75, 58, 23, 2, 0, 1], 8, [6, 2, 8, 91], [12, 4, 6, 108], [15, 7, 6, 94], [2, 11, 8, 2, 15, 2, 0, 19, 3, 31, 84, 30], [3, 13, 9, 1, 8, 5, 1, 11, 3, 20, 98, 55], [17, 16, 27, 148, 17, 10, 12, 159], 17), ([15, 4, 3, 1, 0, 0, 22, 7, 3, 0, 0, 0, 24, 17, 1, 0, 0, 1, 108, 62, 22, 11, 2, 2], [12, 6, 4, 1, 0, 0, 11, 4, 3, 1, 0, 0, 11, 11, 2, 0, 1, 0, 112, 63, 32, 10, 0, 0], 12, [7, 5, 11, 122], [16, 5, 4, 136], [18, 9, 12, 123], [0, 16, 10, 5, 25, 2, 6, 33, 13, 35, 123, 81], [2, 18, 11, 0, 12, 4, 4, 23, 8, 31, 135, 84], [23, 32, 43, 207, 23, 19, 25, 217], 23)], 0.5151515151515151, 0.525, [0.48, 0.12, 0.37, 0.56, 0.48, 0.16, 0.53, 0.52], [0.34, 0.13, 0.31, 0.58, 0.66, 0.34, 0.33, 0.64], [0.45, 0.78, 0.53, 0.47], [0.85, 0.57, 0.45, 0.57])
print vulcun(stats[0], 1, 'full', 3)


